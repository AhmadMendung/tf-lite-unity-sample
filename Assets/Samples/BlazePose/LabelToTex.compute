#pragma kernel LabelToTex
#pragma kernel BilateralFilter

uint Width;
uint Height;
Texture2D<float4> InputTexture;
StructuredBuffer<float> LabelBuffer;
RWTexture2D<float4> OutputTexture;

// The same paramerters as cv::bilateralFilter
float sigmaColor = 1.0;
float sigmaTexel;
int step = 1;
int radius = 1;

float Gaussian(float x, float sigma) {
    float coeff = -0.5 / (sigma * sigma * 4.0 + 0.000001);
    return exp((x * x) * coeff);
}

[numthreads(8,8,1)]
void LabelToTex (uint2 tid : SV_DispatchThreadID)
{
    float label = LabelBuffer[(Height - 1 - tid.y) * Width + tid.x];
    OutputTexture[tid] = float4(label, 0, 0, 1);
}

// TODO: Implement jointed-bilateral filter
[numthreads(8,8,1)]
void BilateralFilter(uint2 tid : SV_DispatchThreadID)
{
    float center = InputTexture[tid].r;

    float totalColor = 0.0;
    float totalWeight = 0.0;

    for (int y = -radius; y <= radius; y += step)
    {
        for (int x = -radius; x <= radius; x += step)
        {
            uint2 id = uint2(
            min(max((int)tid.x + x, 0), (int)Width - 1),
            min(max((int)tid.y + y, 0), (int)Height - 1));
            float p = InputTexture[id].r;

            // space weight * color weight
            float w = Gaussian(distance((float2)tid, (float2)id) * sigmaTexel, sigmaTexel)
            * Gaussian(distance(p, center), sigmaColor);

            totalWeight += w;
            totalColor += p * w;
        }
    }

    float color = totalColor / totalWeight;
    // Set UV to Red/Green channels
    // Set Segmentation to Blue channel
    OutputTexture[tid] = float4(
    (float)tid.x / Width,
    (float)tid.y / Height,
    color,
    1);
}
